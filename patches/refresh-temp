Bottom: 8089253aa2b78288d6d9df0da1fa17661083c343
Top:    a0a2d6a8131cb8f2296a51aa70650a6f6c77a634
Author: Mark de Wever <koraq@xs4all.nl>
Date:   2021-08-07 15:15:12 +0200

Refresh of add-a-calculator-controller

---

diff --git a/src/modules/calculator/CMakeLists.txt b/src/modules/calculator/CMakeLists.txt
index dc073b6..e36404c 100644
--- a/src/modules/calculator/CMakeLists.txt
+++ b/src/modules/calculator/CMakeLists.txt
@@ -7,6 +7,10 @@ target_compile_options(calculator
 	PRIVATE
 		${module_compile_options}
 )
+target_link_libraries(calculator
+	PRIVATE
+		math
+)
 add_module(calculator.controller controller.cpp)
 add_module(calculator.model model.cpp)
 add_module(calculator.value value.cpp)
diff --git a/src/modules/calculator/controller.cpp b/src/modules/calculator/controller.cpp
index 6f36385..8cc861a 100644
--- a/src/modules/calculator/controller.cpp
+++ b/src/modules/calculator/controller.cpp
@@ -15,6 +15,7 @@
 export module calculator.controller;
 
 import calculator.model;
+import math;
 
 import<charconv>;
 import<format>;
@@ -44,31 +45,72 @@ public:
   tcontroller &operator=(tcontroller &&) = delete;
 
   // *** Operations ***
+
+  /**
+   * Appends data to the input.
+   *
+   * The function doesn't modify the diagnostics.
+   */
+  void append(std::string_view data) noexcept;
+
+  /**
+   * Pushes the current input to the stack.
+   *
+   * The function clears the diagnostics.
+   */
   void push() noexcept;
 
+  /**
+   * Pushes the sum of the last two elements on the stack.
+   *
+   * The function clears the diagnostics.
+   * The function doesn't affect the input, however it's expected the input
+   * buffer is empty.
+   *
+   * @note If the input isn't empty the behaviour might change in the future,
+   * by first pushing the current contents of the input.
+   */
+  void math_add() noexcept;
+
 private:
   void push(std::string_view input);
 
   void duplicate_last_entry();
   void parse(std::string_view input);
 
+  void diagnostics_set(const std::exception &e);
   tmodel &model_;
 };
 
+void tcontroller::append(std::string_view data) noexcept {
+  try {
+    model_.input_append(data);
+  } catch (const std::exception &e) {
+    diagnostics_set(e);
+  }
+}
+
 void tcontroller::push() noexcept {
   try {
     push(model_.input_get());
     model_.diagnostics_clear();
   } catch (const std::exception &e) {
-#if defined(__cpp_lib_format)
-    model_.diagnostics_set(std::format("[ERR]{:>80.79}", e.what()));
-#else
-    model_.diagnostics_set(e.what());
-#endif
+    diagnostics_set(e);
   }
   model_.input_clear();
 }
 
+void tcontroller::math_add() noexcept {
+  try {
+    const tvalue lhs = model_.stack_pop();
+    const tvalue rhs = model_.stack_pop();
+    model_.stack_push(math::add(lhs.get(), rhs.get()));
+    model_.diagnostics_clear();
+  } catch (const std::exception &e) {
+    diagnostics_set(e);
+  }
+}
+
 void tcontroller::push(std::string_view input) {
   if (input.empty())
     duplicate_last_entry();
@@ -111,4 +153,11 @@ void tcontroller::parse(std::string_view input) {
   model_.stack_push(value);
 }
 
+void tcontroller::diagnostics_set(const std::exception &e) {
+#if defined(__cpp_lib_format)
+  model_.diagnostics_set(std::format("[ERR]{:>80.79}", e.what()));
+#else
+  model_.diagnostics_set(e.what());
+#endif
+}
 } // namespace calculator
diff --git a/tests/calculator/controller.cpp b/tests/calculator/controller.cpp
index 5b82357..abca005 100644
--- a/tests/calculator/controller.cpp
+++ b/tests/calculator/controller.cpp
@@ -20,6 +20,7 @@ import calculator.model;
 
 namespace calculator {
 
+// *** SMF ***
 TEST(controller, constructor) {
   tmodel model;
   const tcontroller controller{model};
@@ -51,6 +52,42 @@ TEST(controller, move_assignment) {
                 "Implement the proper tests.");
 }
 
+// *** append ***
+
+TEST(controller, append) {
+  tmodel model;
+  tcontroller controller{model};
+  static_assert(noexcept(controller.append(std::string_view())));
+
+  controller.append("abc");
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_EQ(model.input_get(), "abc");
+
+  controller.append("");
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_EQ(model.input_get(), "abc");
+
+  controller.append("def");
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_EQ(model.input_get(), "abcdef");
+}
+
+TEST(controller, append_diagnostics_unchanged) {
+  tmodel model;
+  tcontroller controller{model};
+  model.diagnostics_set("Unchanged");
+
+  controller.append("abc");
+  EXPECT_EQ(model.diagnostics_get(), "Unchanged");
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_EQ(model.input_get(), "abc");
+}
+
+// *** push ***
+
 TEST(controller, push) {
   tmodel model;
   tcontroller controller{model};
@@ -168,4 +205,76 @@ TEST(controller, push_invalid_input_after_valid_value) {
   EXPECT_TRUE(model.input_get().empty());
 }
 
+TEST(controller, push_diagnostics_cleared) {
+  tmodel model;
+  tcontroller controller{model};
+  model.diagnostics_set("Cleared");
+  model.input_append("42");
+
+  controller.push();
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_EQ(model.stack_size(), 1);
+  EXPECT_EQ(model.stack_pop().get(), 42);
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+// *** math_add ***
+
+TEST(controller, math_add_too_few_elements) {
+  tmodel model;
+  tcontroller controller{model};
+
+  controller.math_add();
+  EXPECT_EQ(model.diagnostics_get(), format_error("Stack is empty"));
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_TRUE(model.input_get().empty());
+
+  model.stack_push(42);
+  controller.math_add();
+  EXPECT_EQ(model.diagnostics_get(), format_error("Stack is empty"));
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, math_add) {
+  tmodel model;
+  tcontroller controller{model};
+  model.stack_push(42);
+  model.stack_push(42);
+
+  controller.math_add();
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_EQ(model.stack_size(), 1);
+  EXPECT_EQ(model.stack_pop().get(), 84);
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, math_add_diagnostics_cleared) {
+  tmodel model;
+  tcontroller controller{model};
+  model.diagnostics_set("Cleared");
+  model.stack_push(42);
+  model.stack_push(42);
+
+  controller.math_add();
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_EQ(model.stack_size(), 1);
+  EXPECT_EQ(model.stack_pop().get(), 84);
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, math_add_input_unchanged) {
+  tmodel model;
+  tcontroller controller{model};
+  model.stack_push(42);
+  model.stack_push(42);
+  model.input_append("abc");
+
+  controller.math_add();
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_EQ(model.stack_size(), 1);
+  EXPECT_EQ(model.stack_pop().get(), 84);
+  EXPECT_EQ(model.input_get(), "abc");
+}
+
 } // namespace calculator
