Bottom: 724ffa40c8830a3ae02ff83b604c22fba9abb7cf
Top:    9826c86cc6771023df717ac4b2d991a2b88d9c74
Author: Mark de Wever <koraq@xs4all.nl>
Date:   2021-08-07 15:56:31 +0200

Refresh of add-a-calculator-model-object

---

diff --git a/src/modules/calculator/model.cpp b/src/modules/calculator/model.cpp
index cbd5c48..c799329 100644
--- a/src/modules/calculator/model.cpp
+++ b/src/modules/calculator/model.cpp
@@ -78,9 +78,20 @@ public:
 
   // * Input *
 
-  /** Clears the current input. */
+  /**
+   * Clears the current input.
+   *
+   * TODO Is this function still needed?
+   */
   void input_clear() noexcept { input_.clear(); }
 
+  /** Returns the clears the input and returns the original value. */
+  [[nodiscard]] std::string input_steal() {
+    std::string result;
+    std::swap(input_, result);
+    return result;
+  }
+
   /**
    * Appends the @p data to the @ref input_. @note Since the expected usage
    * pattern is that the user only append (and maybe later removes) input
diff --git a/tests/calculator/model.cpp b/tests/calculator/model.cpp
index 5fdf0f8..fa266e6 100644
--- a/tests/calculator/model.cpp
+++ b/tests/calculator/model.cpp
@@ -20,6 +20,8 @@ import<type_traits>;
 
 namespace calculator {
 
+// *** SMF ***
+
 TEST(model, default_constructor) {
   const tmodel model;
   static_assert(noexcept(tmodel{}));
@@ -51,6 +53,8 @@ TEST(model, move_assignment) {
                 "Implement the proper tests.");
 }
 
+// *** Stack operations ***
+
 TEST(model, stack_empty) {
   const tmodel model;
   static_assert(noexcept(model.stack_empty()));
@@ -62,10 +66,10 @@ TEST(model, stack_size) {
 }
 
 TEST(model, stack) {
-	{
-  const tmodel model;
-  static_assert(noexcept(model.stack()));
-	}
+  {
+    const tmodel model;
+    static_assert(noexcept(model.stack()));
+  }
 
   tmodel model;
   const std::vector<tvalue> &stack = model.stack();
@@ -116,6 +120,8 @@ TEST(model, stack_pop) {
   EXPECT_THROW((void)model.stack_pop(), std::out_of_range);
 }
 
+// *** Diagnostic operations ***
+
 TEST(model, diagnostics_get) {
   const tmodel model;
   static_assert(noexcept(model.diagnostics_get()));
@@ -150,6 +156,8 @@ TEST(model, diagnostics_clear) {
   EXPECT_TRUE(model.input_get().empty());
 }
 
+// *** Input operations ***
+
 TEST(model, input_get) {
   const tmodel model;
   static_assert(noexcept(model.input_get()));
@@ -178,7 +186,20 @@ TEST(model, input_clear) {
   model.input_append("abc");
 
   model.input_clear();
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_EQ(model.stack_size(), 0);
   EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(model, input_steal) {
+  tmodel model;
+  model.input_append("abc");
+
+  const std::string input = model.input_steal();
+  EXPECT_EQ(input, "abc");
+
+  EXPECT_TRUE(model.diagnostics_get().empty());
   EXPECT_TRUE(model.stack_empty());
   EXPECT_EQ(model.stack_size(), 0);
   EXPECT_TRUE(model.input_get().empty());
