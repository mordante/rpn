Bottom: bc95e63290b81ffbe0c93e105cc1f4a1efbe6f96
Top:    e043ea4e6e3ea30041dac84512e4a38cd11359d8
Author: Mark de Wever <koraq@xs4all.nl>
Date:   2021-08-07 15:28:05 +0200

Refresh of toy-with-a-gui

---

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index a545078..e787794 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -9,7 +9,6 @@ target_compile_options(rpn
 target_link_libraries(rpn
 	calculator
 	fltk
-	math
 )
 target_include_directories(rpn
 	PRIVATE
diff --git a/src/modules/calculator/calculator.cpp b/src/modules/calculator/calculator.cpp
new file mode 100644
index 0000000..50a05d6
--- /dev/null
+++ b/src/modules/calculator/calculator.cpp
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) Mark de Wever <koraq@xs4all.nl>
+ * Part of the RPN project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY.
+ *
+ * See the COPYING file for more details.
+ */
+
+export module calculator;
+
+export import calculator.controller;
+export import calculator.model;
+export import calculator.value;
diff --git a/src/rpn.cpp b/src/rpn.cpp
index 4e95924..37d8dbe 100644
--- a/src/rpn.cpp
+++ b/src/rpn.cpp
@@ -12,7 +12,7 @@
  * See the COPYING file for more details.
  */
 
- import calculator;
+import calculator;
 
 #include <FL/Fl.H>
 #include <FL/Fl_Box.H>
@@ -43,10 +43,12 @@ private:
   void input_append(std::string_view data);
   void stack_push();
 
+  void update_stack();
+
   Fl_Browser stack_{5, 5, 300, 200};
   Fl_Box input_{5, 210, 300, 20};
 
-  std::string buffer_{};
+  //  std::string buffer_{};
   calculator::tmodel model_;
   calculator::tcontroller controller_{model_};
 };
@@ -59,18 +61,20 @@ void twindow::process_input_event() noexcept {
     case FL_Enter:
     case FL_KP_Enter:
       stack_push();
+      update_stack();
       return;
     }
 
     const std::string text = Fl::event_text();
-    if (text.empty())
-      return;
-
+    /*    if (text.empty())
+          return;
+    */
     // *** Handle special values ***
     if (text.size() == 1) {
       switch (text[0]) {
       case '+':
-        stack_push();
+        controller_.math_add();
+        update_stack();
         return;
       }
     }
@@ -83,19 +87,32 @@ void twindow::process_input_event() noexcept {
 
 void twindow::input_append(std::string_view data) {
 
-  buffer_ += data;
-  input_.label(buffer_.c_str());
+  controller_.append(data);
+  //  buffer_ += data;
+  input_.label(model_.input_get().c_str());
 }
 
 void twindow::stack_push() {
+  /*
+    if (buffer_.empty())
+      return;
+
+    stack_.insert(std::numeric_limits<int>::max(), buffer_.c_str());
 
-  if (buffer_.empty())
-    return;
+    buffer_.clear();
+    input_.label(buffer_.c_str());
+    */
+  //  stack_.insert(std::numeric_limits<int>::max(),
+  //  model_.input_get().c_str());
+  input_.label("");
+  controller_.push();
+}
 
-  stack_.insert(std::numeric_limits<int>::max(), buffer_.c_str());
+void twindow::update_stack() {
+  stack_.clear();
 
-  buffer_.clear();
-  input_.label(buffer_.c_str());
+  for (const auto &value: model_.stack())
+    stack_.insert(std::numeric_limits<int>::max(), value.format().c_str());
 }
 
 int main(int argc, char **argv) {
