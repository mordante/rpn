Bottom: 4346cac5d98c194a76f4f567c4f85a53b7f8578e
Top:    d4ac3da5c3c6deef94610a6bd43a1fe9c214c979
Author: Mark de Wever <koraq@xs4all.nl>
Date:   2021-08-07 15:56:17 +0200

Refresh of add-a-calculator-controller

---

diff --git a/src/modules/calculator/controller.cpp b/src/modules/calculator/controller.cpp
index 8cc861a..3f3c12d 100644
--- a/src/modules/calculator/controller.cpp
+++ b/src/modules/calculator/controller.cpp
@@ -56,19 +56,17 @@ public:
   /**
    * Pushes the current input to the stack.
    *
-   * The function clears the diagnostics.
+   * Upon success the diagnostics are cleared, else they contain the last error.
    */
   void push() noexcept;
 
   /**
-   * Pushes the sum of the last two elements on the stack.
+   * Calculates the sum of two values.
    *
-   * The function clears the diagnostics.
-   * The function doesn't affect the input, however it's expected the input
-   * buffer is empty.
+   * When the input isn't empty equivalent @c pop() @em op @a input
+   * else equivalent @c pop() @em op @c pop()
    *
-   * @note If the input isn't empty the behaviour might change in the future,
-   * by first pushing the current contents of the input.
+   * Upon success the diagnostics are cleared, else they contain the last error.
    */
   void math_add() noexcept;
 
@@ -92,8 +90,7 @@ void tcontroller::append(std::string_view data) noexcept {
 
 void tcontroller::push() noexcept {
   try {
-    push(model_.input_get());
-    model_.diagnostics_clear();
+    push(model_.input_steal());
   } catch (const std::exception &e) {
     diagnostics_set(e);
   }
@@ -102,6 +99,9 @@ void tcontroller::push() noexcept {
 
 void tcontroller::math_add() noexcept {
   try {
+    if (const std::string input = model_.input_steal(); !input.empty())
+      push(input);
+
     const tvalue lhs = model_.stack_pop();
     const tvalue rhs = model_.stack_pop();
     model_.stack_push(math::add(lhs.get(), rhs.get()));
diff --git a/tests/calculator/controller.cpp b/tests/calculator/controller.cpp
index abca005..adc7bdb 100644
--- a/tests/calculator/controller.cpp
+++ b/tests/calculator/controller.cpp
@@ -21,6 +21,7 @@ import calculator.model;
 namespace calculator {
 
 // *** SMF ***
+
 TEST(controller, constructor) {
   tmodel model;
   const tcontroller controller{model};
@@ -236,7 +237,20 @@ TEST(controller, math_add_too_few_elements) {
   EXPECT_TRUE(model.input_get().empty());
 }
 
-TEST(controller, math_add) {
+TEST(controller, math_add_stack_input) {
+  tmodel model;
+  tcontroller controller{model};
+  model.stack_push(42);
+  model.input_append("42");
+
+  controller.math_add();
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_EQ(model.stack_size(), 1);
+  EXPECT_EQ(model.stack_pop().get(), 84);
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, math_add_stack_stack) {
   tmodel model;
   tcontroller controller{model};
   model.stack_push(42);
@@ -263,18 +277,17 @@ TEST(controller, math_add_diagnostics_cleared) {
   EXPECT_TRUE(model.input_get().empty());
 }
 
-TEST(controller, math_add_input_unchanged) {
+TEST(controller, math_add_input_invalid) {
   tmodel model;
   tcontroller controller{model};
   model.stack_push(42);
-  model.stack_push(42);
   model.input_append("abc");
 
   controller.math_add();
-  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_EQ(model.diagnostics_get(), "Invalid numeric value");
   EXPECT_EQ(model.stack_size(), 1);
-  EXPECT_EQ(model.stack_pop().get(), 84);
-  EXPECT_EQ(model.input_get(), "abc");
+  EXPECT_EQ(model.stack_pop().get(), 42);
+  EXPECT_TRUE(model.input_get().empty());
 }
 
 } // namespace calculator
