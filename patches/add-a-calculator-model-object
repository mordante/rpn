Bottom: bbfd1bcc61fef3c71c96e75e3b0a2216c3bb7246
Top:    45d55434d28d55a7be036c460916805c97668b6f
Author: Mark de Wever <koraq@xs4all.nl>
Date:   2021-08-07 08:19:50 +0200

Add a calculator model object.

This contains the entire calculator model used in the application.


---

diff --git a/src/modules/calculator/CMakeLists.txt b/src/modules/calculator/CMakeLists.txt
index a221ed8..089f030 100644
--- a/src/modules/calculator/CMakeLists.txt
+++ b/src/modules/calculator/CMakeLists.txt
@@ -1,9 +1,14 @@
 add_library(calculator
+	model.cpp
 	value.cpp
 )
 target_compile_options(calculator
 	PRIVATE
 		${module_compile_options}
 )
+add_module(calculator.model model.cpp)
 add_module(calculator.value value.cpp)
-add_dependencies(calculator calculator.value.pcm)
+add_dependencies(calculator
+	calculator.model.pcm
+	calculator.value.pcm
+)
diff --git a/src/modules/calculator/model.cpp b/src/modules/calculator/model.cpp
new file mode 100644
index 0000000..128a7f2
--- /dev/null
+++ b/src/modules/calculator/model.cpp
@@ -0,0 +1,80 @@
+/*
+ * Copyright (C) Mark de Wever <koraq@xs4all.nl>
+ * Part of the RPN project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY.
+ *
+ * See the COPYING file for more details.
+ */
+
+export module calculator.model;
+
+export import calculator.value;
+
+import<vector>;
+
+namespace calculator {
+
+/**
+ * The model of the calculator.
+ *
+ * For now a very basic version of this class. Future additions may contain the
+ * diagnostics shown upon errors an the input buffer.
+ *
+ * The class is non-copyable and non-movable. These operations make little
+ * sense for the model and are most likely logic errors.
+ */
+export class tmodel final {
+public:
+  // *** SMF ***
+
+  tmodel() = default;
+  tmodel(const tmodel &) = delete;
+  tmodel(tmodel &&) = delete;
+  ~tmodel() = default;
+
+  tmodel &operator=(const tmodel &) = delete;
+  tmodel &operator=(tmodel &&) = delete;
+
+  // *** Query ***
+
+  [[nodiscard]] bool empty() const noexcept { return stack_.empty(); }
+  [[nodiscard]] size_t size() const noexcept { return stack_.size(); }
+
+  // *** Modifiers ***
+
+  /** Adds the @p value to the back of the stack. */
+  void push(tvalue value) { stack_.emplace_back(std::move(value)); }
+
+  /**
+   * @returns The last element at the back of the stack.
+   * @throws @ref std::out_of_range when the stack is empty.
+   */
+  [[nodiscard]] tvalue pop();
+
+private:
+  /**
+   * The stack with all values of the applications.
+   *
+   * The usage pattern is a LIFO. Since @ref std::vector operates faster on the
+   * the back new elements are added to the back. So the first item is the
+   * oldest item.
+   */
+  std::vector<tvalue> stack_{};
+};
+
+tvalue tmodel::pop() {
+  if (stack_.empty())
+    throw std::out_of_range("Stack is empty");
+
+  tvalue result = stack_.back();
+  stack_.pop_back();
+  return result;
+}
+
+} // namespace calculator
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 1be6d9c..24dbb5f 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -1,4 +1,5 @@
 add_executable(tests
+	calculator/model.cpp
 	calculator/value.cpp
 	math.cpp
 )
diff --git a/tests/calculator/model.cpp b/tests/calculator/model.cpp
new file mode 100644
index 0000000..c7eaba9
--- /dev/null
+++ b/tests/calculator/model.cpp
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) Mark de Wever <koraq@xs4all.nl>
+ * Part of the RPN project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY.
+ *
+ * See the COPYING file for more details.
+ */
+
+import calculator.model;
+
+import<type_traits>;
+
+#include <gtest/gtest.h>
+
+namespace calculator {
+
+TEST(model, default_constructor) {
+  tmodel model;
+  EXPECT_TRUE(model.empty());
+  EXPECT_EQ(model.size(), 0);
+}
+
+TEST(model, copy_constructor) {
+  EXPECT_FALSE(std::is_copy_constructible_v<tmodel>)
+      << "Implement the proper tests.";
+}
+
+TEST(model, move_constructor) {
+  EXPECT_FALSE(std::is_move_constructible_v<tmodel>)
+      << "Implement the proper tests.";
+}
+
+TEST(model, destructor) { EXPECT_TRUE(noexcept(tmodel{}.~tmodel())); }
+
+TEST(model, copy_assignment) {
+  EXPECT_FALSE(std::is_copy_assignable_v<tmodel>)
+      << "Implement the proper tests.";
+}
+
+TEST(model, move_assignment) {
+  EXPECT_FALSE(std::is_move_assignable_v<tmodel>)
+      << "Implement the proper tests.";
+}
+
+TEST(model, empty) {
+  const tmodel model;
+  EXPECT_TRUE(noexcept(model.empty()));
+}
+
+TEST(model, size) {
+  const tmodel model;
+  EXPECT_TRUE(noexcept(model.size()));
+}
+
+TEST(model, push) {
+  tmodel model;
+
+  model.push(42);
+  EXPECT_FALSE(model.empty());
+  EXPECT_EQ(model.size(), 1);
+
+  model.push(42);
+  EXPECT_FALSE(model.empty());
+  EXPECT_EQ(model.size(), 2);
+}
+
+TEST(model, pop) {
+  tmodel model;
+  tvalue value;
+
+  model.push(42);
+  model.push(1);
+
+  value = model.pop();
+  EXPECT_EQ(value.get(), 1);
+  EXPECT_FALSE(model.empty());
+  EXPECT_EQ(model.size(), 1);
+
+  value = model.pop();
+  EXPECT_EQ(value.get(), 42);
+  EXPECT_TRUE(model.empty());
+  EXPECT_EQ(model.size(), 0);
+
+  EXPECT_THROW((void)model.pop(), std::out_of_range);
+}
+
+} // namespace calculator
