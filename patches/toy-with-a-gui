Bottom: 5b96b54b6280fead88f62454f76042810f99c86d
Top:    ff93c0dff87a02a29791cdb51e6c1fb27b48ffea
Author: Mark de Wever <koraq@xs4all.nl>
Date:   2021-08-07 10:04:37 +0200

Toy with a GUI.

Just an intial experiment to have some kind of GUI for the application.


---

diff --git a/cmake/ExternalProjects.cmake b/cmake/ExternalProjects.cmake
index 759f971..9520b46 100644
--- a/cmake/ExternalProjects.cmake
+++ b/cmake/ExternalProjects.cmake
@@ -1,5 +1,30 @@
 include(FetchContent)
 
+#FetchContent_Declare(
+#  imgui
+#  GIT_REPOSITORY https://github.com/ocornut/imgui
+#  GIT_TAG v1.83
+#)
+#FetchContent_GetProperties(imgui)
+#if(NOT imgui_POPULATED)
+#  FetchContent_Populate(imgui)
+##  add_subdirectory(${imgui_SOURCE_DIR} ${imgui_BINARY_DIR})
+#endif()
+
+FetchContent_Declare(
+  fltk
+  GIT_REPOSITORY https://github.com/fltk/fltk
+  GIT_TAG        release-1.3.7
+)
+FetchContent_GetProperties(fltk)
+if(NOT fltk_POPULATED)
+  FetchContent_Populate(fltk)
+  set(BUILD_GMOCK OFF CACHE BOOL "" FORCE)
+  add_subdirectory(${fltk_SOURCE_DIR} ${fltk_BINARY_DIR})
+endif()
+
+
+
 FetchContent_Declare(
   googletest
   GIT_REPOSITORY https://github.com/google/googletest.git
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 0a8cc53..e787794 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -2,3 +2,16 @@ add_subdirectory(modules)
 add_executable(rpn
 	rpn.cpp
 )
+target_compile_options(rpn
+	PRIVATE
+		${module_compile_options}
+)
+target_link_libraries(rpn
+	calculator
+	fltk
+)
+target_include_directories(rpn
+	PRIVATE
+		${fltk_SOURCE_DIR}
+		${fltk_BINARY_DIR}
+)
diff --git a/src/modules/calculator/CMakeLists.txt b/src/modules/calculator/CMakeLists.txt
index e36404c..4bca16e 100644
--- a/src/modules/calculator/CMakeLists.txt
+++ b/src/modules/calculator/CMakeLists.txt
@@ -11,10 +11,12 @@ target_link_libraries(calculator
 	PRIVATE
 		math
 )
+add_module(calculator calculator.cpp)
 add_module(calculator.controller controller.cpp)
 add_module(calculator.model model.cpp)
 add_module(calculator.value value.cpp)
 add_dependencies(calculator
+	calculator.pcm
 	calculator.controller.pcm
 	calculator.model.pcm
 	calculator.value.pcm
diff --git a/src/modules/calculator/calculator.cpp b/src/modules/calculator/calculator.cpp
new file mode 100644
index 0000000..50a05d6
--- /dev/null
+++ b/src/modules/calculator/calculator.cpp
@@ -0,0 +1,19 @@
+/*
+ * Copyright (C) Mark de Wever <koraq@xs4all.nl>
+ * Part of the RPN project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY.
+ *
+ * See the COPYING file for more details.
+ */
+
+export module calculator;
+
+export import calculator.controller;
+export import calculator.model;
+export import calculator.value;
diff --git a/src/modules/calculator/model.cpp b/src/modules/calculator/model.cpp
index c799329..79e7f42 100644
--- a/src/modules/calculator/model.cpp
+++ b/src/modules/calculator/model.cpp
@@ -18,7 +18,7 @@ export import calculator.value;
 
 import<string>;
 import<string_view>;
-import<vector>;
+export import<vector>;
 
 namespace calculator {
 
diff --git a/src/rpn.cpp b/src/rpn.cpp
index 9b5a646..743834d 100644
--- a/src/rpn.cpp
+++ b/src/rpn.cpp
@@ -12,6 +12,96 @@
  * See the COPYING file for more details.
  */
 
-#include <format>
+import calculator;
 
-int main(int, const char **) {}
+#include <FL/Fl.H>
+#include <FL/Fl_Box.H>
+#include <FL/Fl_Browser.H>
+#include <FL/Fl_Window.H>
+#include <iostream>
+
+class twindow final : public Fl_Window {
+public:
+  twindow() : Fl_Window(310, 265, "RPN") {
+    diagnostics_.align(FL_ALIGN_INSIDE | FL_ALIGN_RIGHT);
+    diagnostics_.box(FL_DOWN_BOX);
+
+    input_.align(FL_ALIGN_INSIDE | FL_ALIGN_RIGHT);
+    input_.box(FL_DOWN_BOX);
+  }
+
+private:
+  int handle(int event) override {
+    switch (event) {
+    case FL_KEYDOWN:
+    case FL_PASTE:
+      process_input_event();
+      return 1;
+    }
+    return 0;
+  }
+
+  void process_input_event() noexcept;
+
+  void input_append(std::string_view data);
+
+  void update_ui();
+
+  Fl_Box diagnostics_{5, 5, 300, 20};
+  Fl_Browser stack_{5, 30, 300, 200};
+  Fl_Box input_{5, 235, 300, 20};
+
+  calculator::tmodel model_;
+  calculator::tcontroller controller_{model_};
+};
+
+void twindow::process_input_event() noexcept {
+  try {
+
+    // *** Handle special keys ***
+    switch (Fl::event_key()) {
+    case FL_Enter:
+    case FL_KP_Enter:
+      controller_.push();
+      update_ui();
+      return;
+    }
+
+    const std::string text = Fl::event_text();
+    // *** Handle special values ***
+    if (text.size() == 1) {
+      switch (text[0]) {
+      case '+':
+        controller_.math_add();
+        update_ui();
+        return;
+      }
+    }
+
+    // *** Add the text to the input ***
+    input_append(text);
+  } catch (...) {
+  }
+}
+
+void twindow::input_append(std::string_view data) {
+  controller_.append(data);
+  update_ui();
+}
+
+void twindow::update_ui() {
+  diagnostics_.label(model_.diagnostics_get().c_str());
+
+  stack_.clear();
+  for (const auto &value : model_.stack())
+    stack_.insert(std::numeric_limits<int>::max(), value.format().c_str());
+
+  input_.label(model_.input_get().c_str());
+}
+
+int main(int argc, char **argv) {
+  twindow window;
+  window.end();
+  window.show(argc, argv);
+  return Fl::run();
+}
