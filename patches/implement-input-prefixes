Bottom: d4f495d4f81269f70641c68a9276ecdb0a164ab7
Top:    44eb3a21a8369b63a76da00d5ce353404c75af87
Author: Mark de Wever <koraq@xs4all.nl>
Date:   2021-08-07 20:40:54 +0200

Implement input prefixes.

This allows the input parser to accept
- 0b prefix as binaray
- 0 prefix as octal
- 0x prefix as hexadecimal

Note since - and + are directly parsed as respectively subtract and add there's
no validation on a sign on the input.


---

diff --git a/src/modules/calculator/controller.cpp b/src/modules/calculator/controller.cpp
index 315f596..fe64683 100644
--- a/src/modules/calculator/controller.cpp
+++ b/src/modules/calculator/controller.cpp
@@ -170,10 +170,28 @@ static void validate(std::errc ec) {
   }
 }
 
+int determine_base(std::string_view &input) {
+  if (input.size() < 2 || input[0] != '0')
+    return 10;
+
+  switch (input[1]) {
+  case 'b':
+    input.remove_prefix(2);
+    return 2;
+  default:
+    input.remove_prefix(1);
+    return 8;
+  case 'x':
+    input.remove_prefix(2);
+    return 16;
+  }
+}
+
 void tcontroller::parse(std::string_view input) {
+  int base = determine_base(input);
   int64_t value;
   std::from_chars_result result =
-      std::from_chars(input.begin(), input.end(), value);
+      std::from_chars(input.begin(), input.end(), value, base);
 
   validate(result.ec);
   if (result.ptr != input.end())
diff --git a/tests/calculator/controller.cpp b/tests/calculator/controller.cpp
index 571e805..10a7c06 100644
--- a/tests/calculator/controller.cpp
+++ b/tests/calculator/controller.cpp
@@ -199,7 +199,7 @@ TEST(controller, push_invalid_input_after_valid_value) {
   tmodel model;
   tcontroller controller{model};
 
-  model.input_append("0a");
+  model.input_append("1a");
   controller.push();
   EXPECT_EQ(model.diagnostics_get(), format_error("Invalid numeric value"));
   EXPECT_TRUE(model.stack_empty());
@@ -219,6 +219,97 @@ TEST(controller, push_diagnostics_cleared) {
   EXPECT_TRUE(model.input_get().empty());
 }
 
+TEST(controller, push_base_2_valid) {
+  tmodel model;
+  tcontroller controller{model};
+  model.input_append("0b100");
+
+  controller.push();
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_EQ(model.stack_size(), 1);
+  EXPECT_EQ(model.stack_pop().get(), 4);
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, push_base_2_only_prefix) {
+  tmodel model;
+  tcontroller controller{model};
+  model.input_append("0b");
+
+  controller.push();
+  EXPECT_EQ(model.diagnostics_get(), format_error("Invalid numeric value"));
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, push_base_2_invalid_value) {
+  tmodel model;
+  tcontroller controller{model};
+  model.input_append("0b2");
+
+  controller.push();
+  EXPECT_EQ(model.diagnostics_get(), format_error("Invalid numeric value"));
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, push_base_8_valid) {
+  tmodel model;
+  tcontroller controller{model};
+  model.input_append("010");
+
+  controller.push();
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_EQ(model.stack_size(), 1);
+  EXPECT_EQ(model.stack_pop().get(), 8);
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, push_base_8_invalid_value) {
+  tmodel model;
+  tcontroller controller{model};
+  model.input_append("08");
+
+  controller.push();
+  EXPECT_EQ(model.diagnostics_get(), format_error("Invalid numeric value"));
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, push_base_16_valid) {
+  tmodel model;
+  tcontroller controller{model};
+  model.input_append("0x10");
+
+  controller.push();
+  EXPECT_TRUE(model.diagnostics_get().empty());
+  EXPECT_EQ(model.stack_size(), 1);
+  EXPECT_EQ(model.stack_pop().get(), 16);
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, push_base_16_only_prefix) {
+  tmodel model;
+  tcontroller controller{model};
+  model.input_append("0x");
+
+  controller.push();
+  EXPECT_EQ(model.diagnostics_get(), format_error("Invalid numeric value"));
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_TRUE(model.input_get().empty());
+}
+
+TEST(controller, push_base_16_invalid_value) {
+  tmodel model;
+  tcontroller controller{model};
+  model.input_append("0xg");
+
+  controller.push();
+  EXPECT_EQ(model.diagnostics_get(), format_error("Invalid numeric value"));
+  EXPECT_TRUE(model.stack_empty());
+  EXPECT_TRUE(model.input_get().empty());
+}
+
 // *** math_add ***
 
 TEST(controller, math_add_too_few_elements) {
