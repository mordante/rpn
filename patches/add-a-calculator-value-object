Bottom: b75ba499d1c61954c43023db72e999fcb1fd4cfe
Top:    a58e3db4295a051bc1e0a7c7798255a9f7b36597
Author: Mark de Wever <koraq@xs4all.nl>
Date:   2021-08-07 07:41:39 +0200

Add a calculator value object.

This object mainly lives on the stack of the calculator.


---

diff --git a/src/modules/CMakeLists.txt b/src/modules/CMakeLists.txt
index 2767b4e..42f8989 100644
--- a/src/modules/CMakeLists.txt
+++ b/src/modules/CMakeLists.txt
@@ -1 +1,2 @@
+add_subdirectory(calculator)
 add_subdirectory(math)
diff --git a/src/modules/calculator/CMakeLists.txt b/src/modules/calculator/CMakeLists.txt
new file mode 100644
index 0000000..a221ed8
--- /dev/null
+++ b/src/modules/calculator/CMakeLists.txt
@@ -0,0 +1,9 @@
+add_library(calculator
+	value.cpp
+)
+target_compile_options(calculator
+	PRIVATE
+		${module_compile_options}
+)
+add_module(calculator.value value.cpp)
+add_dependencies(calculator calculator.value.pcm)
diff --git a/src/modules/calculator/value.cpp b/src/modules/calculator/value.cpp
new file mode 100644
index 0000000..0411824
--- /dev/null
+++ b/src/modules/calculator/value.cpp
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) Mark de Wever <koraq@xs4all.nl>
+ * Part of the RPN project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY.
+ *
+ * See the COPYING file for more details.
+ */
+
+export module calculator.value;
+
+import<cinttypes>;
+import<string>;
+
+namespace calculator {
+
+/**
+ * Basic value class for the entries on the calculator's stack.
+ *
+ * At the moment class is a simple wrapper for a @c int64_t. For the future
+ * some changes are planned:
+ * - Allow @c __int128_t as storage type.
+ * - Allow @c double as storage type.
+ * - Cache the output of @ref to_string.
+ *
+ * For these reasons the stack uses this class instead of a @c int64_t directly.
+ */
+export class tvalue final {
+public:
+  tvalue() = default;
+
+  /** Converting constructor. */
+  constexpr tvalue(int64_t value) noexcept : value_(value) {}
+
+  constexpr void set(int64_t value) noexcept { value_ = value; }
+  [[nodiscard]] constexpr int64_t get() const noexcept { return value_; }
+
+  /** @returns The formatted output of the value. */
+  [[nodiscard]] std::string format() const { return std::to_string(value_); };
+
+private:
+  int64_t value_{0};
+};
+
+} // namespace calculator
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index c6ef984..d1587d5 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -1,4 +1,5 @@
 add_executable(tests
+	calculator/value.cpp
 	math.cpp
 )
 target_compile_options(tests
@@ -7,6 +8,7 @@ target_compile_options(tests
 )
 target_link_libraries(tests
 	PRIVATE
+		calculator
 		math
 		gtest_main
 		c++
diff --git a/tests/calculator/value.cpp b/tests/calculator/value.cpp
new file mode 100644
index 0000000..9e1d8aa
--- /dev/null
+++ b/tests/calculator/value.cpp
@@ -0,0 +1,101 @@
+/*
+ * Copyright (C) Mark de Wever <koraq@xs4all.nl>
+ * Part of the RPN project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY.
+ *
+ * See the COPYING file for more details.
+ */
+
+import calculator.value;
+
+#include <gtest/gtest.h>
+
+namespace calculator {
+TEST(value, default_constructor) {
+  EXPECT_TRUE(noexcept(tvalue{}));
+  constexpr tvalue value;
+  EXPECT_EQ(value.get(), 0);
+  EXPECT_EQ(value.format(), "0");
+}
+
+TEST(value, converting_constructor) {
+  EXPECT_TRUE(noexcept(tvalue{1}));
+  constexpr tvalue value = 1;
+  EXPECT_EQ(value.get(), 1);
+  EXPECT_EQ(value.format(), "1");
+}
+
+TEST(value, copy_constructor) {
+  constexpr tvalue v = 1;
+  EXPECT_TRUE(noexcept(tvalue{v}));
+
+  constexpr tvalue value{v};
+  EXPECT_EQ(v.get(), 1);
+  EXPECT_EQ(value.format(), "1");
+  EXPECT_EQ(value.get(), 1);
+  EXPECT_EQ(value.format(), "1");
+}
+
+TEST(value, move_constructor) {
+  constexpr tvalue v = 1;
+  EXPECT_TRUE(noexcept(tvalue{std::move(v)}));
+
+  constexpr tvalue value{std::move(v)};
+  EXPECT_EQ(v.get(), 1);
+  EXPECT_EQ(value.format(), "1");
+}
+
+TEST(value, destructor) { EXPECT_TRUE(noexcept(tvalue{}.~tvalue())); }
+
+TEST(value, copy_assignment) {
+  constexpr tvalue v = 1;
+  tvalue value;
+  EXPECT_TRUE(noexcept(value.operator=(v)));
+
+  value = v;
+  EXPECT_EQ(v.get(), 1);
+  EXPECT_EQ(v.format(), "1");
+
+  EXPECT_EQ(value.get(), 1);
+  EXPECT_EQ(value.format(), "1");
+
+  // Uses implicit constructor.
+  value = 42;
+  EXPECT_EQ(value.get(), 42);
+  EXPECT_EQ(value.format(), "42");
+}
+
+TEST(value, move_assignment) {
+  constexpr tvalue v = 1;
+  tvalue value;
+  EXPECT_TRUE(noexcept(value.operator=(std::move(v))));
+
+  value = std::move(v);
+  EXPECT_EQ(value.get(), 1);
+  EXPECT_EQ(value.format(), "1");
+}
+
+TEST(value, set) {
+  tvalue value;
+  EXPECT_TRUE(noexcept(value.set(42)));
+  value.set(42);
+  EXPECT_EQ(value.get(), 42);
+  EXPECT_EQ(value.format(), "42");
+
+  value.set(1);
+  EXPECT_EQ(value.get(), 1);
+  EXPECT_EQ(value.format(), "1");
+}
+
+TEST(value, get) {
+  constexpr tvalue value;
+  EXPECT_TRUE(noexcept(value.get()));
+}
+
+} // namespace calculator
